package com.softgen.gate.databaseHandler;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.softgen.gate.databaseHandler.Otp;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "OTP".
*/
public class OtpDao extends AbstractDao<Otp, Long> {

    public static final String TABLENAME = "OTP";

    /**
     * Properties of entity Otp.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property OtpNumber = new Property(1, int.class, "otpNumber", false, "OTP_NUMBER");
        public final static Property MobileNo = new Property(2, String.class, "mobileNo", false, "MOBILE_NO");
        public final static Property Email = new Property(3, String.class, "email", false, "EMAIL");
        public final static Property CreatedAt = new Property(4, java.util.Date.class, "createdAt", false, "CREATED_AT");
        public final static Property UpdatedAt = new Property(5, java.util.Date.class, "updatedAt", false, "UPDATED_AT");
        public final static Property ProfileId = new Property(6, long.class, "ProfileId", false, "PROFILE_ID");
    };

    private Query<Otp> profile_GateDatabaseQuery;

    public OtpDao(DaoConfig config) {
        super(config);
    }
    
    public OtpDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"OTP\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"OTP_NUMBER\" INTEGER NOT NULL ," + // 1: otpNumber
                "\"MOBILE_NO\" TEXT NOT NULL ," + // 2: mobileNo
                "\"EMAIL\" TEXT NOT NULL ," + // 3: email
                "\"CREATED_AT\" INTEGER NOT NULL ," + // 4: createdAt
                "\"UPDATED_AT\" INTEGER NOT NULL ," + // 5: updatedAt
                "\"PROFILE_ID\" INTEGER NOT NULL );"); // 6: ProfileId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"OTP\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Otp entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getOtpNumber());
        stmt.bindString(3, entity.getMobileNo());
        stmt.bindString(4, entity.getEmail());
        stmt.bindLong(5, entity.getCreatedAt().getTime());
        stmt.bindLong(6, entity.getUpdatedAt().getTime());
        stmt.bindLong(7, entity.getProfileId());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Otp readEntity(Cursor cursor, int offset) {
        Otp entity = new Otp( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // otpNumber
            cursor.getString(offset + 2), // mobileNo
            cursor.getString(offset + 3), // email
            new java.util.Date(cursor.getLong(offset + 4)), // createdAt
            new java.util.Date(cursor.getLong(offset + 5)), // updatedAt
            cursor.getLong(offset + 6) // ProfileId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Otp entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOtpNumber(cursor.getInt(offset + 1));
        entity.setMobileNo(cursor.getString(offset + 2));
        entity.setEmail(cursor.getString(offset + 3));
        entity.setCreatedAt(new java.util.Date(cursor.getLong(offset + 4)));
        entity.setUpdatedAt(new java.util.Date(cursor.getLong(offset + 5)));
        entity.setProfileId(cursor.getLong(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Otp entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Otp entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "gateDatabase" to-many relationship of Profile. */
    public List<Otp> _queryProfile_GateDatabase(long ProfileId) {
        synchronized (this) {
            if (profile_GateDatabaseQuery == null) {
                QueryBuilder<Otp> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ProfileId.eq(null));
                profile_GateDatabaseQuery = queryBuilder.build();
            }
        }
        Query<Otp> query = profile_GateDatabaseQuery.forCurrentThread();
        query.setParameter(0, ProfileId);
        return query.list();
    }

}
