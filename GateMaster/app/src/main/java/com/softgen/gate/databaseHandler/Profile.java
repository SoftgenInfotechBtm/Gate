package com.softgen.gate.databaseHandler;

import java.util.List;
import com.softgen.gate.databaseHandler.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "PROFILE".
 */
public class Profile {

    private Long id;
    /** Not-null value. */
    private String profileName;
    private long mobileNo;
    /** Not-null value. */
    private String email;
    private short password;
    /** Not-null value. */
    private String city;
    /** Not-null value. */
    private String state;
    /** Not-null value. */
    private String area;
    /** Not-null value. */
    private String offeredServices;
    /** Not-null value. */
    private String requiredServices;
    /** Not-null value. */
    private java.util.Date createdAt;
    /** Not-null value. */
    private java.util.Date updatedAt;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ProfileDao myDao;

    private List<Otp> gateDatabase;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Profile() {
    }

    public Profile(Long id) {
        this.id = id;
    }

    public Profile(Long id, String profileName, long mobileNo, String email, short password, String city, String state, String area, String offeredServices, String requiredServices, java.util.Date createdAt, java.util.Date updatedAt) {
        this.id = id;
        this.profileName = profileName;
        this.mobileNo = mobileNo;
        this.email = email;
        this.password = password;
        this.city = city;
        this.state = state;
        this.area = area;
        this.offeredServices = offeredServices;
        this.requiredServices = requiredServices;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getProfileDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getProfileName() {
        return profileName;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setProfileName(String profileName) {
        this.profileName = profileName;
    }

    public long getMobileNo() {
        return mobileNo;
    }

    public void setMobileNo(long mobileNo) {
        this.mobileNo = mobileNo;
    }

    /** Not-null value. */
    public String getEmail() {
        return email;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setEmail(String email) {
        this.email = email;
    }

    public short getPassword() {
        return password;
    }

    public void setPassword(short password) {
        this.password = password;
    }

    /** Not-null value. */
    public String getCity() {
        return city;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setCity(String city) {
        this.city = city;
    }

    /** Not-null value. */
    public String getState() {
        return state;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setState(String state) {
        this.state = state;
    }

    /** Not-null value. */
    public String getArea() {
        return area;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setArea(String area) {
        this.area = area;
    }

    /** Not-null value. */
    public String getOfferedServices() {
        return offeredServices;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setOfferedServices(String offeredServices) {
        this.offeredServices = offeredServices;
    }

    /** Not-null value. */
    public String getRequiredServices() {
        return requiredServices;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setRequiredServices(String requiredServices) {
        this.requiredServices = requiredServices;
    }

    /** Not-null value. */
    public java.util.Date getCreatedAt() {
        return createdAt;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setCreatedAt(java.util.Date createdAt) {
        this.createdAt = createdAt;
    }

    /** Not-null value. */
    public java.util.Date getUpdatedAt() {
        return updatedAt;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setUpdatedAt(java.util.Date updatedAt) {
        this.updatedAt = updatedAt;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Otp> getGateDatabase() {
        if (gateDatabase == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            OtpDao targetDao = daoSession.getOtpDao();
            List<Otp> gateDatabaseNew = targetDao._queryProfile_GateDatabase(id);
            synchronized (this) {
                if(gateDatabase == null) {
                    gateDatabase = gateDatabaseNew;
                }
            }
        }
        return gateDatabase;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetGateDatabase() {
        gateDatabase = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
